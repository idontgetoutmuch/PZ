/**
 * @file
 *
 * @author Generated by spec2x
 * $Rev$
 * $Date$
 */
#ifndef BIM_P_OBSNODE_HPP
#define BIM_P_OBSNODE_HPP

#include "bi/model/BayesNode.hpp"
#include "bi/state/Coord.hpp"
#include "bi/cuda/cuda.hpp"
#include "bi/math/scalar.hpp"
#include "bi/misc/compile.hpp"

#ifdef USE_SSE
#include "bi/math/sse.hpp" // overloads of standard math functions
#endif

/**
 * \f\$P_obs\f\$; 
 */
class P_obsNode : public bi::BayesNode {
public:
  /**
   * Constructor.
   */
  P_obsNode();
  
  /**
   * @see bi::GaussianLikelihoodMuFunction::mu
   * @see bi::LogNormalLikelihoodFunction::mu
   */
  template<class V1, class V2>
  static CUDA_FUNC_BOTH void mu(const bi::Coord& cox, const V1& pax, V2& mu);

  /**
   * @see bi::GaussianLikelihoodMuFunction::sigma
   * @see bi::LogNormalLikelihoodFunction::sigma
   */
  template<class V1, class V2>
  static CUDA_FUNC_BOTH void sigma(const bi::Coord& cox, const V1& pax,
      V2& sigma);
  

};

#include "bi/model/model.hpp"
#include "bi/traits/type_traits.hpp"
#include "bi/traits/dimension_traits.hpp"
#include "bi/traits/boundary_traits.hpp"
#include "bi/traits/likelihood_traits.hpp"





HAS_COMMON_SIGMA(P_obsNode);
IS_LOG_NORMAL_LIKELIHOOD(P_obsNode);
IS_O_NODE(P_obsNode);



#include "PNode.hpp"











template<class V1, class V2>
inline void P_obsNode::mu(const bi::Coord& cox, const V1& pax, V2& mu) {
  

  BI_UNUSED const V2 P = pax.template fetch<PNode,0,0,0>(cox);





  
  

  
if (true) {
    mu = CUDA_LOG(P);
  }


}

template<class V1, class V2>
inline void P_obsNode::sigma(const bi::Coord& cox, const V1& pax,
    V2& sigma) {
  

  BI_UNUSED const V2 P = pax.template fetch<PNode,0,0,0>(cox);





  
  

  
if (true) {
    sigma = REAL(0.2);
  }


}


#endif
